--Initialize boot
--Decompresses boot files => if they are uncompressed, error in inferred and startup repair is initailized
os.pullEvent() = os.pullEventRaw()
event_rig = false
if fs.exists("running.manifest") then
	event_rig = true
else
	shell.setDir(".os-boot")
end
local bootFrmk = os.loadAPI("/sys/frameworks/mtech-boot.frmk")
local coreFrmk = os.loadAPI("/sys/frameworks/mtech-core.frmk")
local kernel = os.loadAPI("/sys/frameworks/kernel.frmk")
local boot_instructions  = {}

--Run decompress to reinitialize the os from shutdown
function bootCheck()
	if not bootFrmk.checkBootAuth() then
		error("0x001C")
	end
end
local bootOkay = false
if pcall(bootCheck) == "0x001C" then
	bootFrmk.runError("0x001C",true)
else
	bootOkay = true
end

if bootOkay then
	local handle = fs.open("boot.manifest", "r")
	local manifest_file_contents = handle.readAll()
	handle.close()
	boot_instructions = bootFrmk.generateRecoveryInformationFromManifest(manifest_file_contents)
	boot_instructions.decompress()
	local integratedBootVersion = nil
	if fs.exists("/sys/boot/version.info") then
		local integratedBootVersionHandle = fs.open("/sys/boot/version.info", "r")
		integratedBootVersion = integratedBootVersionHandle.readAll()
		integratedBootVersionHandle.close()
	else
		error("0x001D")
	end
	if not bootFrmk.verifyVersionIdentity(manifest_file_contents,integratedBootVersion) then
		kernel.throwMismatchLogEvent()
	end
	if not bootFrmk.verifyInstallID(manifest_file_contents) then
		kernel.throwIllegalInstallEvent()
	end
	shell.setDir("")
	if not boot_instructions.checkAndDecompress then
		kernel.throwDecompressEvent()
	end
	local stack = kernel.new.Stack()
	stack:Push("/sys/boot/main.int")
	stack:Push("/sys/frameworks/procman.frmk")
	shell.run(unpack(stack.internal))
	
else


end
if bootFrmk.shutdown then
	os.shutdown()
else
	core.repairDisk()
end