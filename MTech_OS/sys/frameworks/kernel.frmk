--Developed by Laney Network Technologies for use with M-Tech Operating System. Any other use without consent of the owning party is prohibited
new = {}
local _tagTypes = {}
_tagTypes.Text = ""
_tagTypes.Tag = ""

local _tokenTypes = {}
_tokenTypes.OPENTAG = ""
_tokenTypes.ENDTAG = ""
_tokenTypes.SINGLEClOSE = ""
_tokenTypes.PARAMNAME = ""
_tokenTypes.PARAMVALUE = ""
_tokenTypes.TEXT = ""
_tokenTypes.ERROR = ""



--Private Operations
local stack = 
{
    Peek = function(self)
        if (self.internal ~= nil and #self.internal ~= 0) then
            return self.internal[#self.internal-1]
        end
    end,
    Pop = function(self)
            if (self.internal ~= nil and #self.internal ~= 0) then
                table.remove(self.internal,#self.internal-1)
				self.value = self.internal[#self.internal-1]
            end
    end,
    Push = function(self,item)
        if (self.internal ~= nil) then
            table.insert(self.internal,item)
			self.value = item
        end
    end,
    Clear = function(self)
        
    end,
    Count = function(self)
        
    end,
    Contains = function(self)
        
    end,
}

local dictionary = 
{
	Add = function(self,key,value)
		if (not self.keys.key) then
			self.keys.key = value
		else
			error("An item with the same key has already been added!",2)
		end
	end,
	GetValueFromKey = function(self,key)
		return self.keys.key
	end
}
--Public Functions
function import(path)
   if fs.exists(path) then
       
    else
       error("Referenced: "..path.."; not found") 
    end
end

function new.List()
	local temp =
	{
		items = {}
	}
	setmetatable(temp, {__index = list})
	return temp
end

function new.Stack()
   local temp = 
    {
        internal = {},
        value = "",
        filo = true,
    } 
    setmetatable(temp, {__index = stack})
    return temp
end

function new.Dictionary()
	local temp = 
	{
		keys = {},
	}
	setmetatable(temp, {__index = dictionary})
	return temp
end
--Unit Test: Uncomment to run

function testStack()
   local s = new.Stack()
   s:Push("/boot")
   s:Push("/demo")
   if (s.value ~= "/demo") then error(s.value) end
   if (s:Peek() ~= "/boot") then error(s:Peek()) end
   s:Pop()
   if (s.value ~= "/boot") then error(s.value) end
   s:Pop()
   if (self.value == nil) then error("Should pass") end
end

function testXML()
	local s = new.Stack()
	local ex = "<derp><stuff /><moar></moar></derp>"
end

function testDictionary()
	local d = new.Dictionary()
	d:Add("demo","butt")
	if (d:GetValueFromKey("demo") ~= "butt") then error("Should pass") end
	print(d:GetValueFromKey("demo"))
end
